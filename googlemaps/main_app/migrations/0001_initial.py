# Generated by Django 5.1.7 on 2025-03-27 11:14

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='Category Name')),
                ('slug', models.SlugField(blank=True, max_length=255, null=True, unique=True, verbose_name='Category Slug')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=128, unique=True, verbose_name='Full Name')),
                ('iso_code_2', models.CharField(blank=True, max_length=2, null=True, unique=True, verbose_name='ISO Code (2 letters)')),
                ('slug', models.SlugField(blank=True, max_length=255, null=True, unique=True, verbose_name='Country Slug')),
            ],
            options={
                'verbose_name': 'Country',
                'verbose_name_plural': 'Countries',
                'ordering': ['full_name'],
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=128, verbose_name='State Name')),
                ('iso_code_2', models.CharField(max_length=2, null=True, verbose_name='ISO Code (2 letters)')),
                ('slug', models.SlugField(blank=True, max_length=255, null=True, unique=True, verbose_name='State Slug')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='states', to='main_app.country', verbose_name='Country')),
            ],
            options={
                'verbose_name': 'State',
                'verbose_name_plural': 'States',
                'ordering': ['full_name'],
                'unique_together': {('country', 'full_name')},
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=128, verbose_name='Full Name')),
                ('slug', models.SlugField(blank=True, max_length=255, null=True, unique=True, verbose_name='City Slug')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cities', to='main_app.country', verbose_name='Country')),
                ('state', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cities', to='main_app.state', verbose_name='State')),
            ],
            options={
                'verbose_name': 'City',
                'verbose_name_plural': 'Cities',
                'ordering': ['full_name'],
                'unique_together': {('state', 'full_name')},
            },
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, verbose_name='Place Name')),
                ('slug', models.SlugField(blank=True, max_length=255, null=True, unique=True, verbose_name='Place Slug')),
                ('rating', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Rating')),
                ('num_reviews', models.IntegerField(blank=True, null=True, verbose_name='Number of Reviews')),
                ('reviews_list', models.JSONField(blank=True, null=True, verbose_name='Reviews')),
                ('about', models.TextField(blank=True, null=True, verbose_name='About Place')),
                ('full_address', models.CharField(blank=True, max_length=512, verbose_name='Full Address')),
                ('address', models.CharField(blank=True, max_length=250, verbose_name='Street Address')),
                ('located_in', models.CharField(blank=True, max_length=250, null=True, verbose_name='Located In')),
                ('postcode', models.CharField(blank=True, max_length=250, null=True, verbose_name='Postcode')),
                ('lat', models.FloatField(blank=True, null=True, verbose_name='Latitude')),
                ('lng', models.FloatField(blank=True, null=True, verbose_name='Longitude')),
                ('place_type', models.CharField(max_length=100, null=True, verbose_name='Type of Place')),
                ('open_hours', models.CharField(blank=True, null=True, verbose_name='Opening Hours')),
                ('open_24_7', models.BooleanField(default=False, verbose_name='Open 24/7')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator('^\\+?\\d{10,15}$', message='Invalid phone number')], verbose_name='Phone Number')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email Address')),
                ('website', models.URLField(blank=True, null=True, validators=[django.core.validators.URLValidator()], verbose_name='Website')),
                ('clear_website', models.CharField(max_length=250, null=True, verbose_name='Website Domain')),
                ('facebook', models.CharField(blank=True, null=True, verbose_name='Facebook')),
                ('instagram', models.CharField(blank=True, null=True, verbose_name='Instagram')),
                ('linkedin', models.CharField(blank=True, null=True, verbose_name='LinkedIn')),
                ('youtube', models.CharField(blank=True, null=True, verbose_name='YouTube')),
                ('twitter', models.CharField(blank=True, null=True, verbose_name='Twitter')),
                ('link', models.CharField(max_length=1024, null=True, unique=True, verbose_name='Google Maps Link')),
                ('status', models.CharField(choices=[('published', 'Published'), ('unpublished', 'Unpublished'), ('pending', 'Pending')], default='unpublished', max_length=20, verbose_name='Publication Status')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Created At')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='places', to='main_app.category', verbose_name='Category')),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='places', to='main_app.city', verbose_name='City')),
            ],
            options={
                'verbose_name': 'Place',
                'verbose_name_plural': 'Places',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='main_app_pl_name_a8f80e_idx'), models.Index(fields=['city'], name='main_app_pl_city_id_69369b_idx'), models.Index(fields=['category'], name='main_app_pl_categor_cc633a_idx')],
            },
        ),
    ]
